# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- task: GoTool@0
  displayName: 'Use Go 1.10'

- task: Go@0
  displayName: 'go get'
  inputs:
    arguments: '-d'
    workingDirectory: apis/trips

#- task: Go@0
#  displayName: 'go build'
#  inputs:
#    command: build
#    arguments: '-o "$(System.TeamProject).exe"'

#- task: ArchiveFiles@2
#  displayName: 'Archive files'
#  inputs:
#    rootFolderOrFile: '$(Build.Repository.LocalPath)'
#    includeRootFolder: False

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish artifact'
#  condition: succeededOrFailed()

#variables:
#  GOROOT: '/opt/hostedtoolcache/go/1.11.13/x64' # Go installation path
#  GOBIN:  '$(GOPATH)/bin' # Go binaries path
#  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
#  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

#steps:
#- script: |
#    printenv
#    pwd

#- script: |
#    mkdir -p '$(GOBIN)'
#    mkdir -p '$(GOPATH)/pkg'
#    mkdir -p '$(modulePath)'
#    shopt -s extglob
#    shopt -s dotglob
#    mv !(gopath) '$(modulePath)'
#    echo '##vso[task.prependpath]$(GOBIN)'
#    echo '##vso[task.prependpath]$(GOROOT)/bin'
#  displayName: 'Set up the Go workspace'

#- script: |
#    go version
#    go get -v -t -d ./...
#    if [ -f Gopkg.toml ]; then
#        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#        dep ensure
#    fi
#    go build -v .
#  workingDirectory: '$(modulePath)'
#  displayName: 'Get dependencies, then build'
